use serde::de::Deserializer;
use std::str::FromStr;

/// The `StreetNamePostType` represents the street name post type of an address.  Acceptable post
/// types include the list of recognized street suffix names in Appendix C1 of the United States
/// Postal Service (USPS) Publication 28 - Postal Addressing Standards.
#[allow(missing_docs)]
#[derive(
    Copy,
    Clone,
    Debug,
    PartialEq,
    Eq,
    Default,
    PartialOrd,
    Ord,
    Hash,
    serde::Deserialize,
    serde::Serialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum StreetNamePostType {
    ALLEY,
    ANEX,
    ARCADE,
    AVENUE,
    BAYOU,
    BEACH,
    BEND,
    BLUFF,
    BLUFFS,
    BOTTOM,
    BOULEVARD,
    BRANCH,
    BRIDGE,
    BROOK,
    BROOKS,
    BURG,
    BURGS,
    BYPASS,
    CAMP,
    CANYON,
    CAPE,
    CAUSEWAY,
    CENTER,
    CENTERS,
    CIRCLE,
    CIRCLES,
    CLIFF,
    CLIFFS,
    CLUB,
    COMMON,
    COMMONS,
    CORNER,
    CORNERS,
    COURSE,
    COURT,
    COURTS,
    COVE,
    COVES,
    CREEK,
    CRESCENT,
    CREST,
    CROSSING,
    CROSSROAD,
    CROSSROADS,
    CURVE,
    CUTOFF,
    DALE,
    DAM,
    DIVIDE,
    DRIVE,
    /// Drive Cutoff, added to accommodate Azalea Dr Cutoff.  As Azalea Dr exists, and Drive is the
    /// post type, the Cutoff from Azalea Dr receives a second post type Cutoff.  The FGDC standard
    /// notes that the complete street name can take multiple post types, but to accommodate this in
    /// our data model, we have added a compound post type to the enumeration of valid types.
    // #[serde(rename(deserialize = "DRIVE CUTOFF"))]
    DriveCutoff,
    DRIVES,
    ESTATE,
    ESTATES,
    EXPRESSWAY,
    EXTENSION,
    EXTENSIONS,
    FALL,
    FALLS,
    FERRY,
    FIELD,
    FIELDS,
    FLAT,
    FLATS,
    FORD,
    FORDS,
    FOREST,
    FORGE,
    FORGES,
    FORK,
    FORKS,
    FORT,
    FREEWAY,
    GARDEN,
    GARDENS,
    GATEWAY,
    GLEN,
    GLENS,
    GREEN,
    GREENS,
    GROVE,
    GROVES,
    HARBOR,
    HARBORS,
    HAVEN,
    HEIGHTS,
    HIGHWAY,
    HILL,
    HILLS,
    HOLLOW,
    INLET,
    ISLAND,
    ISLANDS,
    ISLE,
    JUNCTION,
    JUNCTIONS,
    KEY,
    KEYS,
    KNOLL,
    KNOLLS,
    LAKE,
    LAKES,
    LAND,
    LANDING,
    LANE,
    LIGHT,
    LIGHTS,
    LOAF,
    LOCK,
    LOCKS,
    LODGE,
    LOOP,
    MALL,
    MANOR,
    MANORS,
    MEADOW,
    MEADOWS,
    MEWS,
    MILL,
    MILLS,
    MISSION,
    MOTORWAY,
    MOUNT,
    MOUNTAIN,
    MOUNTAINS,
    NECK,
    ORCHARD,
    OVAL,
    OVERPASS,
    PARK,
    PARKWAY,
    PASS,
    PASSAGE,
    PATH,
    PIKE,
    PINE,
    PINES,
    PLACE,
    PLAIN,
    PLAINS,
    PLAZA,
    POINT,
    POINTS,
    PORT,
    PORTS,
    PRAIRIE,
    RADIAL,
    RAMP,
    RANCH,
    RAPID,
    RAPIDS,
    REST,
    RIDGE,
    RIDGES,
    RIVER,
    ROAD,
    ROADS,
    ROUTE,
    ROW,
    RUE,
    RUN,
    SHOAL,
    SHOALS,
    SHORE,
    SHORES,
    SKYWAY,
    SPRING,
    SPRINGS,
    SPUR,
    SQUARE,
    SQUARES,
    STATION,
    STRAVENUE,
    STREAM,
    #[default]
    STREET,
    STREETS,
    SUMMIT,
    TERRACE,
    THROUGHWAY,
    TRACE,
    TRACK,
    TRAFFICWAY,
    TRAIL,
    TRAILER,
    TUNNEL,
    TURNPIKE,
    UNDERPASS,
    UNION,
    UNIONS,
    VALLEY,
    VALLEYS,
    VIADUCT,
    VIEW,
    VIEWS,
    VILLAGE,
    VILLAGES,
    VILLE,
    VISTA,
    WALK,
    WALL,
    WAY,
    WAYS,
    WELL,
    WELLS,
}

impl StreetNamePostType {
    /// The `abbreviate` method returns the standard postal abbreviation for a street name post
    /// type.
    #[tracing::instrument]
    pub fn abbreviate(&self) -> String {
        match self {
            Self::ALLEY => "ALY".to_string(),
            Self::ANEX => "ANX".to_string(),
            Self::ARCADE => "ARC".to_string(),
            Self::AVENUE => "AVE".to_string(),
            Self::BAYOU => "BYU".to_string(),
            Self::BEACH => "BCH".to_string(),
            Self::BEND => "BND".to_string(),
            Self::BLUFF => "BLF".to_string(),
            Self::BLUFFS => "BLFS".to_string(),
            Self::BOTTOM => "BTM".to_string(),
            Self::BOULEVARD => "BLVD".to_string(),
            Self::BRANCH => "BR".to_string(),
            Self::BRIDGE => "BRG".to_string(),
            Self::BROOK => "BRK".to_string(),
            Self::BROOKS => "BRKS".to_string(),
            Self::BURG => "BG".to_string(),
            Self::BURGS => "BGS".to_string(),
            Self::BYPASS => "BYP".to_string(),
            Self::CAMP => "CP".to_string(),
            Self::CANYON => "CYN".to_string(),
            Self::CAPE => "CPE".to_string(),
            Self::CAUSEWAY => "CSWY".to_string(),
            Self::CENTER => "CTR".to_string(),
            Self::CENTERS => "CTRS".to_string(),
            Self::CIRCLE => "CIR".to_string(),
            Self::CIRCLES => "CIRS".to_string(),
            Self::CLIFF => "CLF".to_string(),
            Self::CLIFFS => "CLFS".to_string(),
            Self::CLUB => "CLB".to_string(),
            Self::COMMON => "CMN".to_string(),
            Self::COMMONS => "CMNS".to_string(),
            Self::CORNER => "COR".to_string(),
            Self::CORNERS => "CORS".to_string(),
            Self::COURSE => "CRSE".to_string(),
            Self::COURT => "CT".to_string(),
            Self::COURTS => "CTS".to_string(),
            Self::COVE => "CV".to_string(),
            Self::COVES => "CVS".to_string(),
            Self::CREEK => "CRK".to_string(),
            Self::CRESCENT => "CRES".to_string(),
            Self::CREST => "CRST".to_string(),
            Self::CROSSING => "XING".to_string(),
            Self::CROSSROAD => "XRD".to_string(),
            Self::CROSSROADS => "XRDS".to_string(),
            Self::CURVE => "CURV".to_string(),
            Self::CUTOFF => "CTOFF".to_string(),
            Self::DALE => "DL".to_string(),
            Self::DAM => "DM".to_string(),
            Self::DIVIDE => "DV".to_string(),
            Self::DRIVE => "DR".to_string(),
            Self::DRIVES => "DRS".to_string(),
            Self::DriveCutoff => "DRCTOFF".to_string(),
            Self::ESTATE => "EST".to_string(),
            Self::ESTATES => "ESTS".to_string(),
            Self::EXPRESSWAY => "EXPY".to_string(),
            Self::EXTENSION => "EXT".to_string(),
            Self::EXTENSIONS => "EXTS".to_string(),
            Self::FALL => "FALL".to_string(),
            Self::FALLS => "FLS".to_string(),
            Self::FERRY => "FRY".to_string(),
            Self::FIELD => "FLD".to_string(),
            Self::FIELDS => "FLDS".to_string(),
            Self::FLAT => "FLT".to_string(),
            Self::FLATS => "FLTS".to_string(),
            Self::FORD => "FRD".to_string(),
            Self::FORDS => "FRDS".to_string(),
            Self::FOREST => "FRST".to_string(),
            Self::FORGE => "FRG".to_string(),
            Self::FORGES => "FRGS".to_string(),
            Self::FORK => "FRK".to_string(),
            Self::FORKS => "FRKS".to_string(),
            Self::FORT => "FT".to_string(),
            Self::FREEWAY => "FWY".to_string(),
            Self::GARDEN => "GDN".to_string(),
            Self::GARDENS => "GDNS".to_string(),
            Self::GATEWAY => "GTWY".to_string(),
            Self::GLEN => "GLN".to_string(),
            Self::GLENS => "GLNS".to_string(),
            Self::GREEN => "GRN".to_string(),
            Self::GREENS => "GRNS".to_string(),
            Self::GROVE => "GRV".to_string(),
            Self::GROVES => "GRVS".to_string(),
            Self::HARBOR => "HBR".to_string(),
            Self::HARBORS => "HBRS".to_string(),
            Self::HAVEN => "HVN".to_string(),
            Self::HEIGHTS => "HTS".to_string(),
            Self::HIGHWAY => "HWY".to_string(),
            Self::HILL => "HL".to_string(),
            Self::HILLS => "HLS".to_string(),
            Self::HOLLOW => "HOLW".to_string(),
            Self::INLET => "INLT".to_string(),
            Self::ISLAND => "IS".to_string(),
            Self::ISLANDS => "ISS".to_string(),
            Self::ISLE => "ISLE".to_string(),
            Self::JUNCTION => "JCT".to_string(),
            Self::JUNCTIONS => "JCTS".to_string(),
            Self::KEY => "KY".to_string(),
            Self::KEYS => "KYS".to_string(),
            Self::KNOLL => "KNL".to_string(),
            Self::KNOLLS => "KNLS".to_string(),
            Self::LAKE => "LK".to_string(),
            Self::LAKES => "LKS".to_string(),
            Self::LAND => "LAND".to_string(),
            Self::LANDING => "LNDG".to_string(),
            Self::LANE => "LN".to_string(),
            Self::LIGHT => "LGT".to_string(),
            Self::LIGHTS => "LGTS".to_string(),
            Self::LOAF => "LF".to_string(),
            Self::LOCK => "LCK".to_string(),
            Self::LOCKS => "LCKS".to_string(),
            Self::LODGE => "LDG".to_string(),
            Self::LOOP => "LOOP".to_string(),
            Self::MALL => "MALL".to_string(),
            Self::MANOR => "MNR".to_string(),
            Self::MANORS => "MNRS".to_string(),
            Self::MEADOW => "MDW".to_string(),
            Self::MEADOWS => "MDWS".to_string(),
            Self::MEWS => "MEWS".to_string(),
            Self::MILL => "ML".to_string(),
            Self::MILLS => "MLS".to_string(),
            Self::MISSION => "MSN".to_string(),
            Self::MOTORWAY => "MTWY".to_string(),
            Self::MOUNT => "MT".to_string(),
            Self::MOUNTAIN => "MTN".to_string(),
            Self::MOUNTAINS => "MTNS".to_string(),
            Self::NECK => "NCK".to_string(),
            Self::ORCHARD => "ORCH".to_string(),
            Self::OVAL => "OVAL".to_string(),
            Self::OVERPASS => "OPAS".to_string(),
            Self::PARK => "PARK".to_string(),
            Self::PARKWAY => "PKWY".to_string(),
            Self::PASS => "PASS".to_string(),
            Self::PASSAGE => "PSGE".to_string(),
            Self::PATH => "PATH".to_string(),
            Self::PIKE => "PIKE".to_string(),
            Self::PINE => "PNE".to_string(),
            Self::PINES => "PNES".to_string(),
            Self::PLACE => "PL".to_string(),
            Self::PLAIN => "PLN".to_string(),
            Self::PLAINS => "PLNS".to_string(),
            Self::PLAZA => "PLZ".to_string(),
            Self::POINT => "PT".to_string(),
            Self::POINTS => "PTS".to_string(),
            Self::PORT => "PRT".to_string(),
            Self::PORTS => "PRTS".to_string(),
            Self::PRAIRIE => "PR".to_string(),
            Self::RADIAL => "RADL".to_string(),
            Self::RAMP => "RAMP".to_string(),
            Self::RANCH => "RNCH".to_string(),
            Self::RAPID => "RPD".to_string(),
            Self::RAPIDS => "RPDS".to_string(),
            Self::REST => "RST".to_string(),
            Self::RIDGE => "RDG".to_string(),
            Self::RIDGES => "RDGS".to_string(),
            Self::RIVER => "RIV".to_string(),
            Self::ROAD => "RD".to_string(),
            Self::ROADS => "RDS".to_string(),
            Self::ROUTE => "RTE".to_string(),
            Self::ROW => "ROW".to_string(),
            Self::RUE => "RUE".to_string(),
            Self::RUN => "RUN".to_string(),
            Self::SHOAL => "SHL".to_string(),
            Self::SHOALS => "SHLS".to_string(),
            Self::SHORE => "SHR".to_string(),
            Self::SHORES => "SHRS".to_string(),
            Self::SKYWAY => "SKWY".to_string(),
            Self::SPRING => "SPG".to_string(),
            Self::SPRINGS => "SPGS".to_string(),
            Self::SPUR => "SPUR".to_string(),
            Self::SQUARE => "SQ".to_string(),
            Self::SQUARES => "SQS".to_string(),
            Self::STATION => "STA".to_string(),
            Self::STRAVENUE => "STRA".to_string(),
            Self::STREAM => "STRM".to_string(),
            Self::STREET => "ST".to_string(),
            Self::STREETS => "STS".to_string(),
            Self::SUMMIT => "SMT".to_string(),
            Self::TERRACE => "TER".to_string(),
            Self::THROUGHWAY => "TRWY".to_string(),
            Self::TRACE => "TRCE".to_string(),
            Self::TRACK => "TRAK".to_string(),
            Self::TRAFFICWAY => "TRFY".to_string(),
            Self::TRAIL => "TRL".to_string(),
            Self::TRAILER => "TRLR".to_string(),
            Self::TUNNEL => "TUNL".to_string(),
            Self::TURNPIKE => "TPKE".to_string(),
            Self::UNDERPASS => "UPAS".to_string(),
            Self::UNION => "UN".to_string(),
            Self::UNIONS => "UNS".to_string(),
            Self::VALLEY => "VLY".to_string(),
            Self::VALLEYS => "VLYS".to_string(),
            Self::VIADUCT => "VIA".to_string(),
            Self::VIEW => "VW".to_string(),
            Self::VIEWS => "VWS".to_string(),
            Self::VILLAGE => "VLG".to_string(),
            Self::VILLAGES => "VLGS".to_string(),
            Self::VILLE => "VL".to_string(),
            Self::VISTA => "VIS".to_string(),
            Self::WALK => "WALK".to_string(),
            Self::WALL => "WALL".to_string(),
            Self::WAY => "WAY".to_string(),
            Self::WAYS => "WAYS".to_string(),
            Self::WELL => "WL".to_string(),
            Self::WELLS => "WLS".to_string(),
        }
    }

    /// Matches the target data against novel spellings of valid post types.  Add any missing spelling
    /// variants to the match statement.
    #[tracing::instrument]
    pub fn match_mixed(input: &str) -> Option<Self> {
        let input = input.to_uppercase();
        if let Ok(post_type) = Self::from_str(&input) {
            Some(post_type)
        } else {
            match input.as_str() {
                "ALY" => Some(Self::ALLEY),
                "ANX" => Some(Self::ANEX),
                "ARC" => Some(Self::ARCADE),
                "AVE" => Some(Self::AVENUE),
                "BYU" => Some(Self::BAYOU),
                "BCH" => Some(Self::BEACH),
                "BND" => Some(Self::BEND),
                "BLF" => Some(Self::BLUFF),
                "BLFS" => Some(Self::BLUFFS),
                "BTM" => Some(Self::BOTTOM),
                "BLVD" => Some(Self::BOULEVARD),
                "BR" => Some(Self::BRANCH),
                "BRG" => Some(Self::BRIDGE),
                "BRK" => Some(Self::BROOK),
                "BRKS" => Some(Self::BROOKS),
                "BG" => Some(Self::BURG),
                "BGS" => Some(Self::BURGS),
                "BYP" => Some(Self::BYPASS),
                "CP" => Some(Self::CAMP),
                "CYN" => Some(Self::CANYON),
                "CPE" => Some(Self::CAPE),
                "CSWY" => Some(Self::CAUSEWAY),
                "CTR" => Some(Self::CENTER),
                "CTRS" => Some(Self::CENTERS),
                "CIR" => Some(Self::CIRCLE),
                "CIRS" => Some(Self::CIRCLES),
                "CLF" => Some(Self::CLIFF),
                "CLFS" => Some(Self::CLIFFS),
                "CLB" => Some(Self::CLUB),
                "CMN" => Some(Self::COMMON),
                "CMNS" => Some(Self::COMMONS),
                "COR" => Some(Self::CORNER),
                "CORS" => Some(Self::CORNERS),
                "CRSE" => Some(Self::COURSE),
                "CT" => Some(Self::COURT),
                "CTS" => Some(Self::COURTS),
                "CV" => Some(Self::COVE),
                "CVS" => Some(Self::COVES),
                "CRK" => Some(Self::CREEK),
                "CRES" => Some(Self::CRESCENT),
                "CRST" => Some(Self::CREST),
                "CREST" => Some(Self::CREST),
                "XING" => Some(Self::CROSSING),
                "XRD" => Some(Self::CROSSROAD),
                "XRDS" => Some(Self::CROSSROADS),
                "CURV" => Some(Self::CURVE),
                "CTOFF" => Some(Self::CUTOFF),
                "DL" => Some(Self::DALE),
                "DM" => Some(Self::DAM),
                "DV" => Some(Self::DIVIDE),
                "DR" => Some(Self::DRIVE),
                "DR CUTOFF" => Some(Self::DriveCutoff),
                "DRIVE CUTOFF" => Some(Self::DriveCutoff),
                "EST" => Some(Self::ESTATE),
                "ESTS" => Some(Self::ESTATES),
                "EXPY" => Some(Self::EXPRESSWAY),
                "EXT" => Some(Self::EXTENSION),
                "EXTS" => Some(Self::EXTENSIONS),
                "FLS" => Some(Self::FALLS),
                "FRY" => Some(Self::FERRY),
                "FLD" => Some(Self::FIELD),
                "FLDS" => Some(Self::FIELDS),
                "FLT" => Some(Self::FLAT),
                "FLTS" => Some(Self::FLATS),
                "FRD" => Some(Self::FORD),
                "FRDS" => Some(Self::FORDS),
                "FRST" => Some(Self::FOREST),
                "FRG" => Some(Self::FORGE),
                "FRGS" => Some(Self::FORGES),
                "FRK" => Some(Self::FORK),
                "FRKS" => Some(Self::FORKS),
                "FT" => Some(Self::FORT),
                "FWY" => Some(Self::FREEWAY),
                "GDN" => Some(Self::GARDEN),
                "GDNS" => Some(Self::GARDENS),
                "GTWY" => Some(Self::GATEWAY),
                "GLN" => Some(Self::GLEN),
                "GLEN" => Some(Self::GLEN),
                "GLNS" => Some(Self::GLENS),
                "GRN" => Some(Self::GREEN),
                "GRNS" => Some(Self::GREENS),
                "GRV" => Some(Self::GROVE),
                "GRVS" => Some(Self::GROVES),
                "HBR" => Some(Self::HARBOR),
                "HBRS" => Some(Self::HARBORS),
                "HVN" => Some(Self::HAVEN),
                "HTS" => Some(Self::HEIGHTS),
                "HWY" => Some(Self::HIGHWAY),
                "HL" => Some(Self::HILL),
                "HLS" => Some(Self::HILLS),
                "HOLW" => Some(Self::HOLLOW),
                "INLT" => Some(Self::INLET),
                "IS" => Some(Self::ISLAND),
                "ISS" => Some(Self::ISLANDS),
                "JCT" => Some(Self::JUNCTION),
                "JCTS" => Some(Self::JUNCTIONS),
                "KY" => Some(Self::KEY),
                "KYS" => Some(Self::KEYS),
                "KNL" => Some(Self::KNOLL),
                "KNLS" => Some(Self::KNOLLS),
                "LK" => Some(Self::LAKE),
                "LKS" => Some(Self::LAKES),
                "LNDG" => Some(Self::LANDING),
                "LN" => Some(Self::LANE),
                "LGT" => Some(Self::LIGHT),
                "LGTS" => Some(Self::LIGHTS),
                "LF" => Some(Self::LOAF),
                "LCK" => Some(Self::LOCK),
                "LCKS" => Some(Self::LOCKS),
                "LDG" => Some(Self::LODGE),
                "MNR" => Some(Self::MANOR),
                "MNRS" => Some(Self::MANORS),
                "MDW" => Some(Self::MEADOW),
                "MDWS" => Some(Self::MEADOWS),
                "ML" => Some(Self::MILL),
                "MLS" => Some(Self::MILLS),
                "MSN" => Some(Self::MISSION),
                "MTWY" => Some(Self::MOTORWAY),
                "MT" => Some(Self::MOUNT),
                "MTN" => Some(Self::MOUNTAIN),
                "MTNS" => Some(Self::MOUNTAINS),
                "NCK" => Some(Self::NECK),
                "ORCH" => Some(Self::ORCHARD),
                "OVAL" => Some(Self::OVAL),
                "OPAS" => Some(Self::OVERPASS),
                "PARK" => Some(Self::PARK),
                "PKWY" => Some(Self::PARKWAY),
                "PASS" => Some(Self::PASS),
                "PSGE" => Some(Self::PASSAGE),
                "PATH" => Some(Self::PATH),
                "PIKE" => Some(Self::PIKE),
                "PNE" => Some(Self::PINE),
                "PNES" => Some(Self::PINES),
                "PL" => Some(Self::PLACE),
                "PLN" => Some(Self::PLAIN),
                "PLNS" => Some(Self::PLAINS),
                "PLZ" => Some(Self::PLAZA),
                "PT" => Some(Self::POINT),
                "PTS" => Some(Self::POINTS),
                "PRT" => Some(Self::PORT),
                "PRTS" => Some(Self::PORTS),
                "PR" => Some(Self::PRAIRIE),
                "RADL" => Some(Self::RADIAL),
                "RNCH" => Some(Self::RANCH),
                "RPD" => Some(Self::RAPID),
                "RPDS" => Some(Self::RAPIDS),
                "RST" => Some(Self::REST),
                "RDG" => Some(Self::RIDGE),
                "RDGS" => Some(Self::RIDGES),
                "RIV" => Some(Self::RIVER),
                "RD" => Some(Self::ROAD),
                "RDS" => Some(Self::ROADS),
                "RTE" => Some(Self::ROUTE),
                "SHL" => Some(Self::SHOAL),
                "SHLS" => Some(Self::SHOALS),
                "SHR" => Some(Self::SHORE),
                "SHRS" => Some(Self::SHORES),
                "SKWY" => Some(Self::SKYWAY),
                "SPG" => Some(Self::SPRING),
                "SPGS" => Some(Self::SPRINGS),
                "SQ" => Some(Self::SQUARE),
                "SQS" => Some(Self::SQUARES),
                "STA" => Some(Self::STATION),
                "STRA" => Some(Self::STRAVENUE),
                "STRM" => Some(Self::STREAM),
                "ST" => Some(Self::STREET),
                "STS" => Some(Self::STREETS),
                "SMT" => Some(Self::SUMMIT),
                "TER" => Some(Self::TERRACE),
                "TRWY" => Some(Self::THROUGHWAY),
                "TRCE" => Some(Self::TRACE),
                "TRAK" => Some(Self::TRACK),
                "TRFY" => Some(Self::TRAFFICWAY),
                "TRL" => Some(Self::TRAIL),
                "TRLR" => Some(Self::TRAILER),
                "TUNL" => Some(Self::TUNNEL),
                "TPKE" => Some(Self::TURNPIKE),
                "UPAS" => Some(Self::UNDERPASS),
                "UN" => Some(Self::UNION),
                "UNS" => Some(Self::UNIONS),
                "VLY" => Some(Self::VALLEY),
                "VLYS" => Some(Self::VALLEYS),
                "VIA" => Some(Self::VIADUCT),
                "VW" => Some(Self::VIEW),
                "VWS" => Some(Self::VIEWS),
                "VLG" => Some(Self::VILLAGE),
                "VLGS" => Some(Self::VILLAGES),
                "VL" => Some(Self::VILLE),
                "VIS" => Some(Self::VISTA),
                "WAYS" => Some(Self::WAYS),
                "WL" => Some(Self::WELL),
                "WLS" => Some(Self::WELLS),
                _ => None,
            }
        }
    }

    /// Deserialization function for post type abbreviations.
    /// Calls [`Self::match_mixed`].
    #[tracing::instrument(skip_all)]
    pub fn deserialize_mixed<'de, D: Deserializer<'de>>(de: D) -> Result<Option<Self>, D::Error> {
        let intermediate = serde::Deserialize::deserialize(de)?;
        Ok(Self::match_mixed(intermediate))
    }
}
